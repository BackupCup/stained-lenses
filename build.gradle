plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	runs {
		create("data") {
			client()
			name = "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=lodestone"
			// vmArg "-Dfabric-api.datagen.strict-validation"

			property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath
			property "lodestone.data.server", "false"
		}
	}
}

repositories {
	mavenCentral()

	//Lodestone
	maven { url = 'https://maven.blamejared.com/' }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.theillusivec4.top/" }
	maven { url = 'https://maven.ladysnake.org/releases' }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
}

fabricApi {
	configureDataGeneration()
}

def portingLib = ["asm", "accessors", "attributes", "base", "blocks", "brewing", "client_events", "common", "core", "config", "chunk_loading", "data", "entity", "extensions", "fluids", "gametest", "gui_utils", "items", "lazy_registration", "level_events", "loot", "mixin_extensions", "model_builders", "model_generators", "model_loader", "model_materials", "models", "networking", "obj_loader", "recipe_book_categories", "registries", "tags", "tool_actions", "transfer", "utility",
]

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	//Lodestone
	modImplementation ("team.lodestar.lodestone:lodestone:${project.minecraft_version}-${project.lodestone_version}-fabric")

	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	modImplementation("dev.emi:trinkets:${project.trinkets_version}")

	portingLib.forEach {module ->
		include modImplementation("io.github.fabricators_of_create.Porting-Lib:${module}:${project.porting_lib_version}+${project.minecraft_version}")
	}

	include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.rea_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}



publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}